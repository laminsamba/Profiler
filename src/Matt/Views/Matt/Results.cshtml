@*  if i set the Layout = null; this would tell MVC we were not using a layout page, for finer control of content display. *@


@* add a model binding so that we can pass the addMealProfiles list to this page for easy reference. *@



@* using a single AddMealProfile for this page. Baically, I want to see one meal at a time here. *@
@model List<Matt.Models.AddMealProfile>
@using System.ComponentModel.DataAnnotations;
@using Matt.Models;


@{

    ViewBag.Title = "Create Meal";  // you can set the ViewBag here without using the at symbol, since all the code is in the at symbol block
                                    //  If you set a ViewBag in the controller, you need to use the at symbol before refeening it.
                                    // if you bind the return value in the controller, yo ucan just reference its properties by using
                                    // and at symbol.Property
                                    //
                                    // we want the backbar not to show up if we are on the Add.cshtml view.

    Layout = null;


}



@* this can be used to display results

    ViewBag.MinutesSpentPreparing = minutesSpentPreparing;
    ViewBag.AverageTimeSpentPreparingMeals = (minutesSpentPreparing / (double)numberOfMeals);
    <h1 class="stats-header">Welcome to the NewRoots Meal Profiler and Ingredient Library!</h1>

*@






<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>
</head>
<body>



    <div class="backbar">
        <div>
            @Html.ActionLink("Return to Home", "Index", true, new { @class = "btn btn-default" })

        </div>
    </div>


    <div class="container">
        <h2>Responsive Table</h2>
        <p>The .table-responsive class creates a responsive table which will scroll horizontally on screens that are less than 992px wide (if needed). When viewing on anything larger than 992px, there is no difference:</p>

        <div class="table-responsive">
            <table class="table table-striped table-dark">




                <!-- later i need to model reference the list of added ingredients so i can build this results table
    dynamically -->
                @foreach (var meal in Model)
                {



                    if (meal.SpinachCheckbox == true && meal.SpinachQuantity >= 0)
                    {

                        <thead>
                            <tr class="bg-success">
                                <th>Meal Goal</th>
                                <th>Meal Cost (U.S. Dollars)</th>
                                <th>Preparation Time (minutes)</th>
                                <th>Author</th>
                            </tr>
                        </thead>



                        <tbody class="">
                            <tr class="">
                                <td>
                                    @* when i navigate to /Add/id# I will get specific results  *@
                                    <span class="hidden-xs">
                                        <!-- Meal.Name will return the name of the Meal Goal. -->
                                        @meal.Meal.Name
                                    </span>
                                </td>
                                <td>@meal.MealCost</td>
                                <td>@meal.PrepTime</td>
                                <td>@meal.MealAuthor</td>
                            </tr>
                        </tbody>




                        <thead>
                            <tr>
                                <th>Ingredient</th>
                            </tr>
                        </thead>
                        <thead>
                            <tr>
                                <td>
                                    Spinach
                                </td>
                            </tr>
                        </thead>
                        // inner foreach to print out all of the ingredient nutrition modified
                        // by the formula (Base * Quantity * Units) where grams will have a fictitious unit multiplier.


                        double qty = (double)meal.SpinachQuantity;

                        foreach (KeyValuePair<string, int>
                                    pair in Ingredient.SpinachDictionary)
                        {
                            string nutritionType = pair.Key;
                            int baseNutritionIntValue = pair.Value;
                            double quantity = qty;
                            double modifiedResult = qty * baseNutritionIntValue;


                            <thead>
                                <tr>
                                    <th>Nutrition Value</th>
                                    <th>Base Nutrient USDA % Value</th>
                                    <th>Quantity</th>
                                    <th>Modified USDA % Value</th>
                                </tr>
                            </thead>

                            <tbody>
                                <tr>
                                    <td>

                                        @nutritionType
                                    </td>
                                    <td>@baseNutritionIntValue</td>
                                    <td>@quantity</td>
                                    <td>@modifiedResult</td>
                                </tr>
                            </tbody>
                        }
                    }
                    // if Tomato requirements are met, this prints.
                    if (meal.TomatoCheckbox == true && meal.TomatoQuantity >= 0)
                    {
                        double qty2 = (double)meal.TomatoQuantity;
                        foreach (KeyValuePair<string, int> pair in Ingredient.TomatoDictionary)
                        {
                            string nutritionType = pair.Key;
                            int baseNutritionIntValue = pair.Value;
                            double quantity = qty2;
                            double modifiedResult = qty2 * baseNutritionIntValue;


                            <thead>
                                <tr>
                                    <th>Nutrition Value</th>
                                    <th>Base Nutrient USDA % Value</th>
                                    <th>Quantity</th>
                                    <th>Modified USDA % Value</th>
                                </tr>
                            </thead>

                            <tbody>
                                <tr>
                                    <td>

                                        @nutritionType
                                    </td>
                                    <td>@baseNutritionIntValue</td>
                                    <td>@quantity</td>
                                    <td>@modifiedResult</td>
                                </tr>
                            </tbody>
                        }

                    }

                }
            </table>

        </div>
    </div>

</body>
</html>


